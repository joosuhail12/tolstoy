{
  "openapi": "3.0.0",
  "paths": {
    "/health": {
      "get": {
        "description": "Simple health check endpoint for load balancers and monitoring systems",
        "operationId": "HealthController_getSimpleHealth",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Application is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Load Balancer Health Check",
        "tags": [
          "Health"
        ]
      }
    },
    "/status": {
      "get": {
        "description": "Get basic application health status",
        "operationId": "HealthController_getHealth",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved health status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "uptime": {
                      "type": "number",
                      "example": 12345.678
                    },
                    "version": {
                      "type": "string",
                      "example": "1.0.0"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Health Check",
        "tags": [
          "Health"
        ]
      }
    },
    "/detailed": {
      "get": {
        "description": "Get comprehensive health status including database, environment, and system information",
        "operationId": "HealthController_getDetailedHealth",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved detailed health status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "application": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "example": "ok"
                        },
                        "timestamp": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "uptime": {
                          "type": "number",
                          "example": 12345.678
                        },
                        "version": {
                          "type": "string",
                          "example": "1.0.0"
                        }
                      }
                    },
                    "database": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "example": "connected"
                        },
                        "responseTime": {
                          "type": "number",
                          "example": 15.2
                        },
                        "connection": {
                          "type": "string",
                          "example": "postgresql://..."
                        }
                      }
                    },
                    "environment": {
                      "type": "object",
                      "description": "Environment configuration (sensitive values masked)",
                      "example": {
                        "NODE_ENV": "development",
                        "PORT": 3000
                      }
                    },
                    "system": {
                      "type": "object",
                      "description": "System information",
                      "example": {
                        "platform": "linux",
                        "arch": "x64",
                        "nodeVersion": "18.17.0"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Detailed Health Check",
        "tags": [
          "Health"
        ]
      }
    },
    "/organizations": {
      "post": {
        "description": "Create a new organization",
        "operationId": "OrganizationsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Organization details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrganizationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Organization created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "org_abc123"
                    },
                    "name": {
                      "type": "string",
                      "example": "Acme Corp"
                    },
                    "description": {
                      "type": "string",
                      "example": "Leading technology company"
                    },
                    "settings": {
                      "type": "object",
                      "example": {
                        "timezone": "UTC"
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid organization data"
          }
        },
        "summary": "Create Organization",
        "tags": [
          "Organizations"
        ]
      },
      "get": {
        "description": "Get all organizations",
        "operationId": "OrganizationsController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved organizations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "org_abc123"
                      },
                      "name": {
                        "type": "string",
                        "example": "Acme Corp"
                      },
                      "description": {
                        "type": "string",
                        "example": "Leading technology company"
                      },
                      "settings": {
                        "type": "object",
                        "example": {
                          "timezone": "UTC"
                        }
                      },
                      "createdAt": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "List Organizations",
        "tags": [
          "Organizations"
        ]
      }
    },
    "/organizations/{id}": {
      "get": {
        "description": "Get a specific organization by ID",
        "operationId": "OrganizationsController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Organization ID",
            "schema": {
              "example": "org_abc123",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved organization",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "org_abc123"
                    },
                    "name": {
                      "type": "string",
                      "example": "Acme Corp"
                    },
                    "description": {
                      "type": "string",
                      "example": "Leading technology company"
                    },
                    "settings": {
                      "type": "object",
                      "example": {
                        "timezone": "UTC"
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Organization not found"
          }
        },
        "summary": "Get Organization",
        "tags": [
          "Organizations"
        ]
      },
      "put": {
        "description": "Update organization details",
        "operationId": "OrganizationsController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Organization ID",
            "schema": {
              "example": "org_abc123",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Updated organization details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrganizationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Organization updated successfully"
          },
          "404": {
            "description": "Organization not found"
          }
        },
        "summary": "Update Organization",
        "tags": [
          "Organizations"
        ]
      },
      "delete": {
        "description": "Delete an organization permanently",
        "operationId": "OrganizationsController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Organization ID",
            "schema": {
              "example": "org_abc123",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Organization deleted successfully"
          },
          "404": {
            "description": "Organization not found"
          }
        },
        "summary": "Delete Organization",
        "tags": [
          "Organizations"
        ]
      }
    },
    "/users": {
      "post": {
        "description": "Create a new user in the organization",
        "operationId": "UsersController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "User details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "user_abc123"
                    },
                    "email": {
                      "type": "string",
                      "example": "john.doe@example.com"
                    },
                    "name": {
                      "type": "string",
                      "example": "John Doe"
                    },
                    "role": {
                      "type": "string",
                      "example": "member"
                    },
                    "profile": {
                      "type": "object",
                      "example": {
                        "department": "Engineering"
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid user data"
          },
          "409": {
            "description": "User with this email already exists"
          }
        },
        "security": [
          {
            "x-user-id": []
          },
          {
            "x-org-id": []
          }
        ],
        "summary": "Create User",
        "tags": [
          "Users"
        ]
      },
      "get": {
        "description": "Get all users in the organization",
        "operationId": "UsersController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "user_abc123"
                      },
                      "email": {
                        "type": "string",
                        "example": "john.doe@example.com"
                      },
                      "name": {
                        "type": "string",
                        "example": "John Doe"
                      },
                      "role": {
                        "type": "string",
                        "example": "member"
                      },
                      "profile": {
                        "type": "object",
                        "example": {
                          "department": "Engineering"
                        }
                      },
                      "createdAt": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "x-user-id": []
          },
          {
            "x-org-id": []
          }
        ],
        "summary": "List Users",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{id}": {
      "get": {
        "description": "Get a specific user by ID",
        "operationId": "UsersController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "example": "user_abc123",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "user_abc123"
                    },
                    "email": {
                      "type": "string",
                      "example": "john.doe@example.com"
                    },
                    "name": {
                      "type": "string",
                      "example": "John Doe"
                    },
                    "role": {
                      "type": "string",
                      "example": "member"
                    },
                    "profile": {
                      "type": "object",
                      "example": {
                        "department": "Engineering"
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "x-user-id": []
          },
          {
            "x-org-id": []
          }
        ],
        "summary": "Get User",
        "tags": [
          "Users"
        ]
      },
      "put": {
        "description": "Update user details",
        "operationId": "UsersController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "example": "user_abc123",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Updated user details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "x-user-id": []
          },
          {
            "x-org-id": []
          }
        ],
        "summary": "Update User",
        "tags": [
          "Users"
        ]
      },
      "delete": {
        "description": "Delete a user permanently",
        "operationId": "UsersController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "example": "user_abc123",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted successfully"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "x-user-id": []
          },
          {
            "x-org-id": []
          }
        ],
        "summary": "Delete User",
        "tags": [
          "Users"
        ]
      }
    },
    "/tools": {
      "post": {
        "description": "Register a new external tool for use in workflows",
        "operationId": "ToolsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Tool configuration",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateToolDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Tool created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "cme3zjbwc0000uppplgvx1hse"
                    },
                    "name": {
                      "type": "string",
                      "example": "Slack Notifier"
                    },
                    "baseUrl": {
                      "type": "string",
                      "example": "https://hooks.slack.com/services"
                    },
                    "authType": {
                      "type": "string",
                      "example": "apiKey"
                    },
                    "orgId": {
                      "type": "string",
                      "example": "org_123"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid tool configuration"
          }
        },
        "security": [
          {
            "x-user-id": []
          },
          {
            "x-org-id": []
          }
        ],
        "summary": "Create Tool",
        "tags": [
          "Tools"
        ]
      },
      "get": {
        "description": "Get all registered tools for the organization",
        "operationId": "ToolsController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved tools",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "tool_abc123"
                      },
                      "name": {
                        "type": "string",
                        "example": "Slack Notifier"
                      },
                      "type": {
                        "type": "string",
                        "example": "notification"
                      },
                      "configuration": {
                        "type": "object",
                        "example": {
                          "baseUrl": "https://hooks.slack.com"
                        }
                      },
                      "description": {
                        "type": "string",
                        "example": "Send notifications to Slack channels"
                      },
                      "version": {
                        "type": "string",
                        "example": "1.0.0"
                      },
                      "createdAt": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "x-user-id": []
          },
          {
            "x-org-id": []
          }
        ],
        "summary": "List Tools",
        "tags": [
          "Tools"
        ]
      }
    },
    "/tools/{id}": {
      "get": {
        "description": "Get a specific tool by ID",
        "operationId": "ToolsController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Tool ID",
            "schema": {
              "example": "tool_abc123",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved tool",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "tool_abc123"
                    },
                    "name": {
                      "type": "string",
                      "example": "Slack Notifier"
                    },
                    "type": {
                      "type": "string",
                      "example": "notification"
                    },
                    "configuration": {
                      "type": "object",
                      "example": {
                        "baseUrl": "https://hooks.slack.com"
                      }
                    },
                    "description": {
                      "type": "string",
                      "example": "Send notifications to Slack channels"
                    },
                    "version": {
                      "type": "string",
                      "example": "1.0.0"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Tool not found"
          }
        },
        "security": [
          {
            "x-user-id": []
          },
          {
            "x-org-id": []
          }
        ],
        "summary": "Get Tool",
        "tags": [
          "Tools"
        ]
      },
      "put": {
        "description": "Update tool configuration",
        "operationId": "ToolsController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Tool ID",
            "schema": {
              "example": "tool_abc123",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Updated tool configuration",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateToolDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tool updated successfully"
          },
          "404": {
            "description": "Tool not found"
          }
        },
        "security": [
          {
            "x-user-id": []
          },
          {
            "x-org-id": []
          }
        ],
        "summary": "Update Tool",
        "tags": [
          "Tools"
        ]
      },
      "delete": {
        "description": "Delete a tool permanently (will affect workflows using this tool)",
        "operationId": "ToolsController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Tool ID",
            "schema": {
              "example": "tool_abc123",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Tool deleted successfully"
          },
          "404": {
            "description": "Tool not found"
          },
          "409": {
            "description": "Tool is being used by active workflows and cannot be deleted"
          }
        },
        "security": [
          {
            "x-user-id": []
          },
          {
            "x-org-id": []
          }
        ],
        "summary": "Delete Tool",
        "tags": [
          "Tools"
        ]
      }
    },
    "/actions": {
      "post": {
        "description": "Create a reusable action template for workflows. Actions define API calls that can be executed within workflow steps.",
        "operationId": "ActionsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Action template configuration",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateActionDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Action created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "action_abc123"
                    },
                    "name": {
                      "type": "string",
                      "example": "Send Slack Message"
                    },
                    "key": {
                      "type": "string",
                      "example": "slack_send_message"
                    },
                    "toolId": {
                      "type": "string",
                      "example": "tool_slack_123"
                    },
                    "method": {
                      "type": "string",
                      "example": "POST"
                    },
                    "endpoint": {
                      "type": "string",
                      "example": "/api/chat.postMessage"
                    },
                    "headers": {
                      "type": "object",
                      "example": {
                        "Content-Type": "application/json"
                      }
                    },
                    "inputSchema": {
                      "type": "array",
                      "example": []
                    },
                    "executeIf": {
                      "type": "object",
                      "example": {}
                    },
                    "version": {
                      "type": "number",
                      "example": 1
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid action configuration"
          }
        },
        "security": [
          {
            "x-user-id": []
          },
          {
            "x-org-id": []
          }
        ],
        "summary": "Create Action",
        "tags": [
          "Actions"
        ]
      },
      "get": {
        "description": "Get all reusable action templates for the organization",
        "operationId": "ActionsController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved actions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "action_abc123"
                      },
                      "name": {
                        "type": "string",
                        "example": "Send Slack Message"
                      },
                      "key": {
                        "type": "string",
                        "example": "slack_send_message"
                      },
                      "toolId": {
                        "type": "string",
                        "example": "tool_slack_123"
                      },
                      "method": {
                        "type": "string",
                        "example": "POST"
                      },
                      "endpoint": {
                        "type": "string",
                        "example": "/api/chat.postMessage"
                      },
                      "headers": {
                        "type": "object",
                        "example": {
                          "Content-Type": "application/json"
                        }
                      },
                      "inputSchema": {
                        "type": "array",
                        "example": [
                          {
                            "name": "channel",
                            "type": "string",
                            "required": true,
                            "description": "Slack channel ID"
                          }
                        ]
                      },
                      "executeIf": {
                        "type": "object",
                        "example": {}
                      },
                      "version": {
                        "type": "number",
                        "example": 1
                      },
                      "createdAt": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "x-user-id": []
          },
          {
            "x-org-id": []
          }
        ],
        "summary": "List Actions",
        "tags": [
          "Actions"
        ]
      }
    },
    "/actions/{id}": {
      "get": {
        "description": "Get a specific action template by ID",
        "operationId": "ActionsController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Action ID",
            "schema": {
              "example": "action_abc123",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved action",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "action_abc123"
                    },
                    "name": {
                      "type": "string",
                      "example": "Send Slack Message"
                    },
                    "key": {
                      "type": "string",
                      "example": "slack_send_message"
                    },
                    "toolId": {
                      "type": "string",
                      "example": "tool_slack_123"
                    },
                    "method": {
                      "type": "string",
                      "example": "POST"
                    },
                    "endpoint": {
                      "type": "string",
                      "example": "/api/chat.postMessage"
                    },
                    "headers": {
                      "type": "object",
                      "example": {
                        "Content-Type": "application/json",
                        "Authorization": "Bearer {token}"
                      }
                    },
                    "inputSchema": {
                      "type": "array",
                      "example": [
                        {
                          "name": "channel",
                          "type": "string",
                          "required": true,
                          "description": "Slack channel ID"
                        },
                        {
                          "name": "text",
                          "type": "string",
                          "required": true,
                          "description": "Message content"
                        }
                      ]
                    },
                    "executeIf": {
                      "type": "object",
                      "example": {
                        "user.role": "admin"
                      }
                    },
                    "version": {
                      "type": "number",
                      "example": 1
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Action not found"
          }
        },
        "security": [
          {
            "x-user-id": []
          },
          {
            "x-org-id": []
          }
        ],
        "summary": "Get Action",
        "tags": [
          "Actions"
        ]
      },
      "put": {
        "description": "Update an action template configuration",
        "operationId": "ActionsController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Action ID",
            "schema": {
              "example": "action_abc123",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Updated action configuration",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateActionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Action updated successfully"
          },
          "400": {
            "description": "Invalid action configuration"
          },
          "404": {
            "description": "Action not found"
          }
        },
        "security": [
          {
            "x-user-id": []
          },
          {
            "x-org-id": []
          }
        ],
        "summary": "Update Action",
        "tags": [
          "Actions"
        ]
      },
      "delete": {
        "description": "Delete an action template permanently. This will affect any workflows that use this action.",
        "operationId": "ActionsController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Action ID",
            "schema": {
              "example": "action_abc123",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Action deleted successfully"
          },
          "404": {
            "description": "Action not found"
          },
          "409": {
            "description": "Action is being used by active workflows and cannot be deleted"
          }
        },
        "security": [
          {
            "x-user-id": []
          },
          {
            "x-org-id": []
          }
        ],
        "summary": "Delete Action",
        "tags": [
          "Actions"
        ]
      }
    },
    "/actions/{key}/execute": {
      "post": {
        "description": "Execute a standalone action with provided inputs. This endpoint allows you to run individual actions outside of workflow contexts.",
        "operationId": "ActionsController_execute",
        "parameters": [
          {
            "name": "X-Org-ID",
            "required": true,
            "in": "header",
            "description": "Organization ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-User-ID",
            "required": false,
            "in": "header",
            "description": "User ID for user-scoped authentication (optional)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "required": true,
            "in": "path",
            "description": "Unique action key identifier",
            "schema": {
              "example": "slack_send_message",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Action execution inputs",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExecuteActionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Action executed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "executionId": {
                      "type": "string",
                      "example": "exec_abc123"
                    },
                    "duration": {
                      "type": "number",
                      "example": 1250
                    },
                    "data": {
                      "type": "object",
                      "description": "Action execution result",
                      "example": {
                        "messageId": "msg_456",
                        "status": "sent"
                      }
                    },
                    "outputs": {
                      "type": "object",
                      "description": "Additional output data from action",
                      "example": {
                        "channel": "#general",
                        "timestamp": "2024-01-15T10:30:00Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - missing headers or invalid inputs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "X-Org-ID header required"
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid or missing authentication"
          },
          "404": {
            "description": "Action not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Action \"invalid_key\" not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error during action execution"
          }
        },
        "security": [
          {
            "x-user-id": []
          },
          {
            "x-org-id": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Execute a single Action by key",
        "tags": [
          "Actions"
        ]
      }
    },
    "/actions/executions": {
      "get": {
        "description": "Get a list of all action executions for the organization",
        "operationId": "ActionsController_listExecutions",
        "parameters": [
          {
            "name": "X-Action-Key",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Status",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved action executions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "clm123..."
                      },
                      "executionId": {
                        "type": "string",
                        "example": "exec_1234567890_abc123"
                      },
                      "actionKey": {
                        "type": "string",
                        "example": "slack_send_message"
                      },
                      "status": {
                        "type": "string",
                        "enum": [
                          "pending",
                          "running",
                          "completed",
                          "failed",
                          "cancelled"
                        ],
                        "example": "completed"
                      },
                      "inputs": {
                        "type": "object",
                        "example": {
                          "channel": "#general",
                          "text": "Hello"
                        }
                      },
                      "outputs": {
                        "type": "object",
                        "example": {
                          "messageId": "msg_123"
                        }
                      },
                      "error": {
                        "type": "object",
                        "nullable": true
                      },
                      "duration": {
                        "type": "number",
                        "example": 1250
                      },
                      "retryCount": {
                        "type": "number",
                        "example": 0
                      },
                      "parentId": {
                        "type": "string",
                        "nullable": true
                      },
                      "createdAt": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "action": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "example": "Send Slack Message"
                          },
                          "key": {
                            "type": "string",
                            "example": "slack_send_message"
                          },
                          "tool": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "example": "Slack"
                              }
                            }
                          }
                        }
                      },
                      "user": {
                        "type": "object",
                        "nullable": true,
                        "properties": {
                          "email": {
                            "type": "string",
                            "example": "user@example.com"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "x-user-id": []
          },
          {
            "x-org-id": []
          }
        ],
        "summary": "List Action Executions",
        "tags": [
          "Actions"
        ]
      }
    },
    "/actions/{key}/executions": {
      "get": {
        "description": "Get execution history for a specific action",
        "operationId": "ActionsController_listActionExecutions",
        "parameters": [
          {
            "name": "key",
            "required": true,
            "in": "path",
            "description": "Action key",
            "schema": {
              "example": "slack_send_message",
              "type": "string"
            }
          },
          {
            "name": "X-Status",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved action executions"
          }
        },
        "security": [
          {
            "x-user-id": []
          },
          {
            "x-org-id": []
          }
        ],
        "summary": "List Executions for Specific Action",
        "tags": [
          "Actions"
        ]
      }
    },
    "/actions/executions/{executionId}": {
      "get": {
        "description": "Get detailed status of a specific action execution",
        "operationId": "ActionsController_getExecutionStatus",
        "parameters": [
          {
            "name": "executionId",
            "required": true,
            "in": "path",
            "description": "Execution ID",
            "schema": {
              "example": "exec_1234567890_abc123",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved execution status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "clm123..."
                    },
                    "executionId": {
                      "type": "string",
                      "example": "exec_1234567890_abc123"
                    },
                    "actionKey": {
                      "type": "string",
                      "example": "slack_send_message"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "pending",
                        "running",
                        "completed",
                        "failed",
                        "cancelled"
                      ],
                      "example": "completed"
                    },
                    "inputs": {
                      "type": "object"
                    },
                    "outputs": {
                      "type": "object",
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "nullable": true
                    },
                    "duration": {
                      "type": "number",
                      "example": 1250
                    },
                    "retryCount": {
                      "type": "number",
                      "example": 0
                    },
                    "parentId": {
                      "type": "string",
                      "nullable": true
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "action": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "key": {
                          "type": "string"
                        },
                        "tool": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "user": {
                      "type": "object",
                      "nullable": true,
                      "properties": {
                        "email": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Execution not found"
          }
        },
        "security": [
          {
            "x-user-id": []
          },
          {
            "x-org-id": []
          }
        ],
        "summary": "Get Execution Status",
        "tags": [
          "Actions"
        ]
      }
    },
    "/actions/executions/{executionId}/cancel": {
      "post": {
        "description": "Cancel a pending or running action execution",
        "operationId": "ActionsController_cancelExecution",
        "parameters": [
          {
            "name": "executionId",
            "required": true,
            "in": "path",
            "description": "Execution ID",
            "schema": {
              "example": "exec_1234567890_abc123",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Execution cancelled successfully"
          },
          "400": {
            "description": "Cannot cancel execution in current status"
          },
          "404": {
            "description": "Execution not found"
          }
        },
        "security": [
          {
            "x-user-id": []
          },
          {
            "x-org-id": []
          }
        ],
        "summary": "Cancel Execution",
        "tags": [
          "Actions"
        ]
      }
    },
    "/actions/executions/{executionId}/retry": {
      "post": {
        "description": "Retry a failed or cancelled action execution",
        "operationId": "ActionsController_retryExecution",
        "parameters": [
          {
            "name": "executionId",
            "required": true,
            "in": "path",
            "description": "Execution ID",
            "schema": {
              "example": "exec_1234567890_abc123",
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Retry initiated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "executionId": {
                      "type": "string",
                      "example": "exec_9876543210_xyz789"
                    },
                    "duration": {
                      "type": "number",
                      "example": 1250
                    },
                    "data": {
                      "type": "object"
                    },
                    "outputs": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Can only retry failed or cancelled executions"
          },
          "404": {
            "description": "Execution not found"
          }
        },
        "security": [
          {
            "x-user-id": []
          },
          {
            "x-org-id": []
          }
        ],
        "summary": "Retry Execution",
        "tags": [
          "Actions"
        ]
      }
    },
    "/flows": {
      "post": {
        "description": "Create a new workflow with steps and configuration",
        "operationId": "FlowsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Flow definition",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFlowDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Flow created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "flow_abc123"
                    },
                    "name": {
                      "type": "string",
                      "example": "User Onboarding Flow"
                    },
                    "description": {
                      "type": "string",
                      "example": "Automated user onboarding process"
                    },
                    "version": {
                      "type": "number",
                      "example": 1
                    },
                    "steps": {
                      "type": "array",
                      "example": []
                    },
                    "settings": {
                      "type": "object",
                      "example": {
                        "timeout": 300000
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid flow definition"
          }
        },
        "security": [
          {
            "x-user-id": []
          },
          {
            "x-org-id": []
          }
        ],
        "summary": "Create Flow",
        "tags": [
          "Flows"
        ]
      },
      "get": {
        "description": "Get all workflows for the organization",
        "operationId": "FlowsController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved flows",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "flow_abc123"
                      },
                      "name": {
                        "type": "string",
                        "example": "User Onboarding Flow"
                      },
                      "version": {
                        "type": "number",
                        "example": 1
                      },
                      "steps": {
                        "type": "array",
                        "example": []
                      },
                      "createdAt": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "x-user-id": []
          },
          {
            "x-org-id": []
          }
        ],
        "summary": "List Flows",
        "tags": [
          "Flows"
        ]
      }
    },
    "/flows/{id}": {
      "get": {
        "description": "Get a specific workflow by ID",
        "operationId": "FlowsController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Flow ID",
            "schema": {
              "example": "flow_abc123",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved flow"
          },
          "404": {
            "description": "Flow not found"
          }
        },
        "security": [
          {
            "x-user-id": []
          },
          {
            "x-org-id": []
          }
        ],
        "summary": "Get Flow",
        "tags": [
          "Flows"
        ]
      },
      "put": {
        "description": "Update workflow definition and configuration",
        "operationId": "FlowsController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Flow ID",
            "schema": {
              "example": "flow_abc123",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Updated flow definition",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFlowDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Flow updated successfully"
          },
          "404": {
            "description": "Flow not found"
          }
        },
        "security": [
          {
            "x-user-id": []
          },
          {
            "x-org-id": []
          }
        ],
        "summary": "Update Flow",
        "tags": [
          "Flows"
        ]
      },
      "delete": {
        "description": "Delete a workflow permanently",
        "operationId": "FlowsController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Flow ID",
            "schema": {
              "example": "flow_abc123",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Flow deleted successfully"
          },
          "404": {
            "description": "Flow not found"
          },
          "409": {
            "description": "Flow has active executions and cannot be deleted"
          }
        },
        "security": [
          {
            "x-user-id": []
          },
          {
            "x-org-id": []
          }
        ],
        "summary": "Delete Flow",
        "tags": [
          "Flows"
        ]
      }
    },
    "/flows/{id}/execute": {
      "post": {
        "description": "Execute a workflow either synchronously or asynchronously with optional input variables",
        "operationId": "FlowsController_executeFlow",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Flow ID to execute",
            "schema": {
              "example": "flow_abc123",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Execution configuration",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "variables": {
                    "type": "object",
                    "description": "Input variables for the flow execution",
                    "example": {
                      "userId": "user_123",
                      "email": "user@example.com"
                    }
                  },
                  "useDurable": {
                    "type": "boolean",
                    "description": "Whether to use durable (async) execution",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Flow execution started successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "executionId": {
                      "type": "string",
                      "example": "exec_abc123"
                    },
                    "status": {
                      "type": "string",
                      "example": "running"
                    },
                    "mode": {
                      "type": "string",
                      "example": "durable"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid execution parameters"
          },
          "404": {
            "description": "Flow not found"
          }
        },
        "security": [
          {
            "x-user-id": []
          },
          {
            "x-org-id": []
          }
        ],
        "summary": "Execute Flow",
        "tags": [
          "Flows"
        ]
      }
    },
    "/flows/{id}/executions": {
      "get": {
        "description": "Get execution history for a specific flow",
        "operationId": "FlowsController_getFlowExecutions",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Flow ID",
            "schema": {
              "example": "flow_abc123",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved flow executions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "executionId": {
                        "type": "string",
                        "example": "exec_abc123"
                      },
                      "status": {
                        "type": "string",
                        "example": "completed"
                      },
                      "startedAt": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "completedAt": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "variables": {
                        "type": "object",
                        "example": {
                          "userId": "user_123"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Flow not found"
          }
        },
        "security": [
          {
            "x-user-id": []
          },
          {
            "x-org-id": []
          }
        ],
        "summary": "Get Flow Executions",
        "tags": [
          "Flows"
        ]
      }
    },
    "/flows/{id}/executions/{executionId}": {
      "get": {
        "description": "Get detailed status of a specific flow execution",
        "operationId": "FlowsController_getExecutionStatus",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Flow ID",
            "schema": {
              "example": "flow_abc123",
              "type": "string"
            }
          },
          {
            "name": "executionId",
            "required": true,
            "in": "path",
            "description": "Execution ID",
            "schema": {
              "example": "exec_abc123",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved execution status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "executionId": {
                      "type": "string",
                      "example": "exec_abc123"
                    },
                    "status": {
                      "type": "string",
                      "example": "running"
                    },
                    "currentStep": {
                      "type": "string",
                      "example": "step_2"
                    },
                    "progress": {
                      "type": "number",
                      "example": 0.6
                    },
                    "startedAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "variables": {
                      "type": "object",
                      "example": {
                        "userId": "user_123"
                      }
                    },
                    "output": {
                      "type": "object",
                      "example": {
                        "result": "success"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Execution not found"
          }
        },
        "security": [
          {
            "x-user-id": []
          },
          {
            "x-org-id": []
          }
        ],
        "summary": "Get Execution Status",
        "tags": [
          "Flows"
        ]
      }
    },
    "/flows/{id}/executions/{executionId}/cancel": {
      "post": {
        "description": "Cancel a running flow execution",
        "operationId": "FlowsController_cancelExecution",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Flow ID",
            "schema": {
              "example": "flow_abc123",
              "type": "string"
            }
          },
          {
            "name": "executionId",
            "required": true,
            "in": "path",
            "description": "Execution ID",
            "schema": {
              "example": "exec_abc123",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Execution cancelled successfully"
          },
          "404": {
            "description": "Execution not found or already completed"
          }
        },
        "security": [
          {
            "x-user-id": []
          },
          {
            "x-org-id": []
          }
        ],
        "summary": "Cancel Execution",
        "tags": [
          "Flows"
        ]
      }
    },
    "/flows/{id}/executions/{executionId}/retry": {
      "post": {
        "description": "Retry a failed flow execution",
        "operationId": "FlowsController_retryExecution",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Flow ID",
            "schema": {
              "example": "flow_abc123",
              "type": "string"
            }
          },
          {
            "name": "executionId",
            "required": true,
            "in": "path",
            "description": "Execution ID to retry",
            "schema": {
              "example": "exec_abc123",
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Execution retry initiated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "newExecutionId": {
                      "type": "string",
                      "example": "exec_def456"
                    },
                    "status": {
                      "type": "string",
                      "example": "running"
                    },
                    "retryAttempt": {
                      "type": "number",
                      "example": 2
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Execution is not in a retryable state"
          },
          "404": {
            "description": "Execution not found"
          }
        },
        "security": [
          {
            "x-user-id": []
          },
          {
            "x-org-id": []
          }
        ],
        "summary": "Retry Execution",
        "tags": [
          "Flows"
        ]
      }
    },
    "/flows/{id}/metrics": {
      "get": {
        "description": "Get execution metrics and statistics for a flow",
        "operationId": "FlowsController_getExecutionMetrics",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Flow ID",
            "schema": {
              "example": "flow_abc123",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved execution metrics",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalExecutions": {
                      "type": "number",
                      "example": 152
                    },
                    "successfulExecutions": {
                      "type": "number",
                      "example": 140
                    },
                    "failedExecutions": {
                      "type": "number",
                      "example": 12
                    },
                    "averageExecutionTime": {
                      "type": "number",
                      "example": 4250.5
                    },
                    "lastExecutionAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "successRate": {
                      "type": "number",
                      "example": 0.921
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Flow not found"
          }
        },
        "security": [
          {
            "x-user-id": []
          },
          {
            "x-org-id": []
          }
        ],
        "summary": "Get Execution Metrics",
        "tags": [
          "Flows"
        ]
      }
    },
    "/execution-logs": {
      "post": {
        "description": "Create a log entry for workflow step execution. This tracks the execution history, inputs, outputs, and any errors.",
        "operationId": "ExecutionLogsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Execution log entry data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateExecutionLogDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Execution log created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "log_def456"
                    },
                    "flowId": {
                      "type": "string",
                      "example": "flow_abc123"
                    },
                    "executionId": {
                      "type": "string",
                      "example": "exec_xyz789"
                    },
                    "stepKey": {
                      "type": "string",
                      "example": "send_notification"
                    },
                    "inputs": {
                      "type": "object",
                      "example": {}
                    },
                    "outputs": {
                      "type": "object",
                      "example": {}
                    },
                    "error": {
                      "type": "object",
                      "example": null
                    },
                    "status": {
                      "type": "string",
                      "example": "completed"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid execution log data"
          }
        },
        "security": [
          {
            "x-user-id": []
          },
          {
            "x-org-id": []
          }
        ],
        "summary": "Create Execution Log",
        "tags": [
          "Execution Logs"
        ]
      },
      "get": {
        "description": "Get all execution logs for the organization. This provides a complete history of workflow step executions.",
        "operationId": "ExecutionLogsController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved execution logs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "log_def456"
                      },
                      "flowId": {
                        "type": "string",
                        "example": "flow_abc123"
                      },
                      "executionId": {
                        "type": "string",
                        "example": "exec_xyz789"
                      },
                      "stepKey": {
                        "type": "string",
                        "example": "send_notification"
                      },
                      "inputs": {
                        "type": "object",
                        "example": {
                          "stepName": "Send Slack Notification",
                          "stepType": "action",
                          "config": {},
                          "variables": {},
                          "stepOutputs": {}
                        }
                      },
                      "outputs": {
                        "type": "object",
                        "example": {
                          "messageId": "msg_456",
                          "success": true
                        }
                      },
                      "error": {
                        "type": "object",
                        "example": null
                      },
                      "status": {
                        "type": "string",
                        "example": "completed"
                      },
                      "createdAt": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "x-user-id": []
          },
          {
            "x-org-id": []
          }
        ],
        "summary": "List Execution Logs",
        "tags": [
          "Execution Logs"
        ]
      }
    },
    "/execution-logs/{id}": {
      "get": {
        "description": "Get a specific execution log entry by ID",
        "operationId": "ExecutionLogsController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Execution log ID",
            "schema": {
              "example": "log_def456",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved execution log",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "log_def456"
                    },
                    "flowId": {
                      "type": "string",
                      "example": "flow_abc123"
                    },
                    "executionId": {
                      "type": "string",
                      "example": "exec_xyz789"
                    },
                    "stepKey": {
                      "type": "string",
                      "example": "send_notification"
                    },
                    "inputs": {
                      "type": "object",
                      "example": {
                        "stepName": "Send Slack Notification",
                        "stepType": "action",
                        "config": {
                          "actionKey": "slack_send_message",
                          "parameters": {
                            "channel": "#general",
                            "message": "Workflow completed successfully"
                          }
                        },
                        "executeIf": "user.role == \"admin\"",
                        "variables": {
                          "userId": "user_123",
                          "timestamp": "2024-01-15T10:30:00Z"
                        },
                        "stepOutputs": {
                          "previousStepResult": "success"
                        }
                      }
                    },
                    "outputs": {
                      "type": "object",
                      "example": {
                        "messageId": "msg_456",
                        "timestamp": "2024-01-15T10:30:05Z",
                        "success": true,
                        "responseCode": 200
                      }
                    },
                    "error": {
                      "type": "object",
                      "example": null
                    },
                    "status": {
                      "type": "string",
                      "example": "completed"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Execution log not found"
          }
        },
        "security": [
          {
            "x-user-id": []
          },
          {
            "x-org-id": []
          }
        ],
        "summary": "Get Execution Log",
        "tags": [
          "Execution Logs"
        ]
      },
      "put": {
        "description": "Update execution log entry. Typically used to add outputs or update status after step completion.",
        "operationId": "ExecutionLogsController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Execution log ID",
            "schema": {
              "example": "log_def456",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Updated execution log data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateExecutionLogDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Execution log updated successfully"
          },
          "400": {
            "description": "Invalid execution log data"
          },
          "404": {
            "description": "Execution log not found"
          }
        },
        "security": [
          {
            "x-user-id": []
          },
          {
            "x-org-id": []
          }
        ],
        "summary": "Update Execution Log",
        "tags": [
          "Execution Logs"
        ]
      },
      "delete": {
        "description": "Delete an execution log entry. Use with caution as this removes audit trail information.",
        "operationId": "ExecutionLogsController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Execution log ID",
            "schema": {
              "example": "log_def456",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Execution log deleted successfully"
          },
          "404": {
            "description": "Execution log not found"
          },
          "409": {
            "description": "Cannot delete log entry that is part of active execution"
          }
        },
        "security": [
          {
            "x-user-id": []
          },
          {
            "x-org-id": []
          }
        ],
        "summary": "Delete Execution Log",
        "tags": [
          "Execution Logs"
        ]
      }
    },
    "/webhooks": {
      "post": {
        "description": "Create a new webhook to receive event notifications",
        "operationId": "WebhooksController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Webhook configuration",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWebhookDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Webhook created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "webhook_abc123"
                    },
                    "url": {
                      "type": "string",
                      "example": "https://api.example.com/webhook"
                    },
                    "eventTypes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "flow.execution.completed"
                      ]
                    },
                    "enabled": {
                      "type": "boolean",
                      "example": true
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid webhook configuration"
          }
        },
        "security": [
          {
            "x-user-id": []
          },
          {
            "x-org-id": []
          }
        ],
        "summary": "Create Webhook",
        "tags": [
          "Webhooks"
        ]
      },
      "get": {
        "description": "Get all webhooks for the organization, optionally filtered by event type",
        "operationId": "WebhooksController_findAll",
        "parameters": [
          {
            "name": "eventType",
            "required": false,
            "in": "query",
            "description": "Filter webhooks by event type",
            "schema": {
              "example": "flow.execution.completed",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved webhooks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "webhook_abc123"
                      },
                      "url": {
                        "type": "string",
                        "example": "https://api.example.com/webhook"
                      },
                      "eventTypes": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "example": [
                          "flow.execution.completed"
                        ]
                      },
                      "enabled": {
                        "type": "boolean",
                        "example": true
                      },
                      "createdAt": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "x-user-id": []
          },
          {
            "x-org-id": []
          }
        ],
        "summary": "List Webhooks",
        "tags": [
          "Webhooks"
        ]
      }
    },
    "/webhooks/event-types": {
      "get": {
        "description": "Get list of all valid event types that can be subscribed to via webhooks",
        "operationId": "WebhooksController_getValidEventTypes",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved event types",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "eventTypes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "flow.execution.started",
                        "flow.execution.completed",
                        "flow.execution.failed",
                        "user.created",
                        "organization.updated"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "x-user-id": []
          },
          {
            "x-org-id": []
          }
        ],
        "summary": "Get Valid Event Types",
        "tags": [
          "Webhooks"
        ]
      }
    },
    "/webhooks/{id}": {
      "get": {
        "description": "Get a specific webhook by ID",
        "operationId": "WebhooksController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Webhook ID",
            "schema": {
              "example": "webhook_abc123",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved webhook",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "webhook_abc123"
                    },
                    "url": {
                      "type": "string",
                      "example": "https://api.example.com/webhook"
                    },
                    "eventTypes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "flow.execution.completed"
                      ]
                    },
                    "enabled": {
                      "type": "boolean",
                      "example": true
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Webhook not found"
          }
        },
        "security": [
          {
            "x-user-id": []
          },
          {
            "x-org-id": []
          }
        ],
        "summary": "Get Webhook",
        "tags": [
          "Webhooks"
        ]
      },
      "put": {
        "description": "Update webhook configuration",
        "operationId": "WebhooksController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Webhook ID",
            "schema": {
              "example": "webhook_abc123",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Updated webhook configuration",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhookDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Webhook updated successfully"
          },
          "404": {
            "description": "Webhook not found"
          }
        },
        "security": [
          {
            "x-user-id": []
          },
          {
            "x-org-id": []
          }
        ],
        "summary": "Update Webhook",
        "tags": [
          "Webhooks"
        ]
      },
      "delete": {
        "description": "Delete a webhook permanently",
        "operationId": "WebhooksController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Webhook ID",
            "schema": {
              "example": "webhook_abc123",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Webhook deleted successfully"
          },
          "404": {
            "description": "Webhook not found"
          }
        },
        "security": [
          {
            "x-user-id": []
          },
          {
            "x-org-id": []
          }
        ],
        "summary": "Delete Webhook",
        "tags": [
          "Webhooks"
        ]
      }
    },
    "/webhooks/{id}/toggle": {
      "patch": {
        "description": "Enable or disable a webhook",
        "operationId": "WebhooksController_toggle",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Webhook ID",
            "schema": {
              "example": "webhook_abc123",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Webhook status toggled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "webhook_abc123"
                    },
                    "enabled": {
                      "type": "boolean",
                      "example": false
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Webhook not found"
          }
        },
        "security": [
          {
            "x-user-id": []
          },
          {
            "x-org-id": []
          }
        ],
        "summary": "Toggle Webhook",
        "tags": [
          "Webhooks"
        ]
      }
    },
    "/webhooks/{id}/test": {
      "post": {
        "description": "Send a test payload to verify webhook endpoint is working",
        "operationId": "WebhooksController_testWebhook",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Webhook ID",
            "schema": {
              "example": "webhook_abc123",
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Test webhook request sent",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "statusCode": {
                      "type": "number",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Webhook test successful"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Webhook not found"
          }
        },
        "security": [
          {
            "x-user-id": []
          },
          {
            "x-org-id": []
          }
        ],
        "summary": "Test Webhook",
        "tags": [
          "Webhooks"
        ]
      }
    },
    "/tools/{toolId}/secrets": {
      "post": {
        "description": "Securely store encrypted credentials for an external tool. These credentials will be used when the tool is executed in workflows.",
        "operationId": "ToolSecretsController_storeCredentials",
        "parameters": [
          {
            "name": "toolId",
            "required": true,
            "in": "path",
            "description": "Tool ID to store credentials for",
            "schema": {
              "example": "tool_slack_123",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Tool credentials to store securely",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "credentials": {
                    "type": "object",
                    "description": "Key-value pairs of credentials (will be encrypted)",
                    "example": {
                      "apiKey": "your-api-key-here",
                      "webhookUrl": "https://hooks.slack.com/services/YOUR/WEBHOOK/URL",
                      "botToken": "your-bot-token-here"
                    }
                  }
                },
                "required": [
                  "credentials"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Credentials stored successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "toolId": {
                      "type": "string",
                      "example": "tool_slack_123"
                    },
                    "toolName": {
                      "type": "string",
                      "example": "Slack Integration"
                    },
                    "maskedCredentials": {
                      "type": "object",
                      "example": {
                        "apiKey": "your-***...***key",
                        "webhookUrl": "https://***...***XX",
                        "botToken": "your-***...***token"
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid credentials data"
          },
          "404": {
            "description": "Tool not found"
          }
        },
        "security": [
          {
            "x-org-id": []
          }
        ],
        "summary": "Store Tool Credentials",
        "tags": [
          "Tool Secrets"
        ]
      },
      "get": {
        "description": "Retrieve stored credentials for a tool. By default returns masked values for security. Use unmask=true to get actual values (use carefully).",
        "operationId": "ToolSecretsController_getCredentials",
        "parameters": [
          {
            "name": "toolId",
            "required": true,
            "in": "path",
            "description": "Tool ID to retrieve credentials for",
            "schema": {
              "example": "tool_slack_123",
              "type": "string"
            }
          },
          {
            "name": "unmask",
            "required": false,
            "in": "query",
            "description": "Whether to return unmasked credential values (use with extreme caution)",
            "schema": {
              "enum": [
                "true",
                "false"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Credentials retrieved successfully (masked by default)",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Masked Credentials Response",
                      "type": "object",
                      "properties": {
                        "toolId": {
                          "type": "string",
                          "example": "tool_slack_123"
                        },
                        "toolName": {
                          "type": "string",
                          "example": "Slack Integration"
                        },
                        "maskedCredentials": {
                          "type": "object",
                          "example": {
                            "apiKey": "your-***...***key",
                            "webhookUrl": "https://***...***XX",
                            "botToken": "your-***...***token"
                          }
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "updatedAt": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    },
                    {
                      "title": "Unmasked Credentials Response (unmask=true)",
                      "type": "object",
                      "properties": {
                        "toolId": {
                          "type": "string",
                          "example": "tool_slack_123"
                        },
                        "toolName": {
                          "type": "string",
                          "example": "Slack Integration"
                        },
                        "credentials": {
                          "type": "object",
                          "example": {
                            "apiKey": "your-api-key-here",
                            "webhookUrl": "https://hooks.slack.com/services/YOUR/WEBHOOK/URL",
                            "botToken": "your-bot-token-here"
                          }
                        },
                        "maskedCredentials": {
                          "type": "object",
                          "example": {
                            "apiKey": "your-***...***key",
                            "webhookUrl": "https://***...***XX",
                            "botToken": "your-***...***token"
                          }
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "updatedAt": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Tool credentials not found"
          }
        },
        "security": [
          {
            "x-org-id": []
          }
        ],
        "summary": "Get Tool Credentials",
        "tags": [
          "Tool Secrets"
        ]
      },
      "delete": {
        "description": "Permanently delete stored credentials for a tool. This will affect any workflows that use this tool.",
        "operationId": "ToolSecretsController_deleteCredentials",
        "parameters": [
          {
            "name": "toolId",
            "required": true,
            "in": "path",
            "description": "Tool ID to delete credentials for",
            "schema": {
              "example": "tool_slack_123",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Credentials deleted successfully"
          },
          "404": {
            "description": "Tool credentials not found"
          },
          "409": {
            "description": "Cannot delete credentials that are being used by active workflows"
          }
        },
        "security": [
          {
            "x-org-id": []
          }
        ],
        "summary": "Delete Tool Credentials",
        "tags": [
          "Tool Secrets"
        ]
      }
    },
    "/tools/secrets": {
      "get": {
        "description": "Get all tools in the organization with their credential status. Shows which tools have credentials stored and which ones need setup.",
        "operationId": "ToolSecretsListController_listToolsWithCredentials",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved tools with credential status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "toolId": {
                        "type": "string",
                        "example": "tool_slack_123"
                      },
                      "toolName": {
                        "type": "string",
                        "example": "Slack Integration"
                      },
                      "toolType": {
                        "type": "string",
                        "example": "notification"
                      },
                      "hasCredentials": {
                        "type": "boolean",
                        "example": true,
                        "description": "Whether credentials are stored for this tool"
                      },
                      "credentialKeys": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "example": [
                          "apiKey",
                          "webhookUrl",
                          "botToken"
                        ],
                        "description": "List of credential keys (if credentials exist)"
                      },
                      "lastUpdated": {
                        "type": "string",
                        "format": "date-time",
                        "description": "When credentials were last updated (if they exist)"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "x-org-id": []
          }
        ],
        "summary": "List Tools with Credentials",
        "tags": [
          "Tool Secrets List"
        ]
      }
    },
    "/tools/{toolId}/auth": {
      "post": {
        "description": "Configures authentication settings (API Key or OAuth2) for a specific tool within an organization. API Key auth requires headerName and headerValue. OAuth2 auth requires clientId, clientSecret, and accessToken. A default callback URL is automatically added for OAuth2 configurations.",
        "operationId": "ToolAuthController_upsert",
        "parameters": [
          {
            "name": "X-Org-ID",
            "required": true,
            "in": "header",
            "description": "Organization identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toolId",
            "required": true,
            "in": "path",
            "description": "Unique identifier of the tool to configure",
            "schema": {
              "example": "tool-123",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAuthConfigDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Auth configuration created or updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthConfigResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data or validation errors"
          },
          "404": {
            "description": "Tool not found or organization does not have access"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create or update organization-level auth configuration for a tool",
        "tags": [
          "Tool Authentication"
        ]
      },
      "get": {
        "description": "Retrieves the authentication configuration for a specific tool within an organization. Sensitive values may be masked in the response.",
        "operationId": "ToolAuthController_get",
        "parameters": [
          {
            "name": "X-Org-ID",
            "required": true,
            "in": "header",
            "description": "Organization identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toolId",
            "required": true,
            "in": "path",
            "description": "Unique identifier of the tool",
            "schema": {
              "example": "tool-123",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Auth configuration retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthConfigResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Auth configuration not found for this tool and organization"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Fetch current auth configuration for a tool",
        "tags": [
          "Tool Authentication"
        ]
      },
      "delete": {
        "description": "Removes the authentication configuration for a specific tool within an organization. This action also cleans up associated secrets and cache entries.",
        "operationId": "ToolAuthController_remove",
        "parameters": [
          {
            "name": "X-Org-ID",
            "required": true,
            "in": "header",
            "description": "Organization identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toolId",
            "required": true,
            "in": "path",
            "description": "Unique identifier of the tool",
            "schema": {
              "example": "tool-123",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Auth configuration deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteAuthConfigResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Auth configuration not found for this tool and organization"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete auth configuration for a tool",
        "tags": [
          "Tool Authentication"
        ]
      }
    },
    "/auth/{toolId}/login": {
      "get": {
        "description": "Redirects the user to the OAuth provider authorization page. The user must grant permission, after which they will be redirected back to the callback endpoint.",
        "operationId": "OAuthController_initiateLogin",
        "parameters": [
          {
            "name": "toolId",
            "required": true,
            "in": "path",
            "description": "Tool unique identifier (database ID)",
            "schema": {
              "example": "cme3zjbwc0000uppplgvx1hse",
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": true,
            "in": "query",
            "description": "User ID for whom to initiate OAuth",
            "schema": {
              "example": "user_123",
              "type": "string"
            }
          },
          {
            "name": "X-Org-ID",
            "required": true,
            "in": "header",
            "description": "Organization identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "302": {
            "description": "Redirects to OAuth provider authorization URL"
          },
          "400": {
            "description": "Invalid request parameters or tool not configured for OAuth",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Missing or invalid organization ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Initiate OAuth2 login for a user",
        "tags": [
          "OAuth Authentication"
        ]
      }
    },
    "/auth/callback": {
      "get": {
        "description": "Processes the authorization code returned by the OAuth provider, exchanges it for access tokens, and stores the user credentials.",
        "operationId": "OAuthController_handleCallback",
        "parameters": [
          {
            "name": "code",
            "required": true,
            "in": "query",
            "description": "Authorization code from OAuth provider",
            "schema": {
              "example": "abc123def456",
              "type": "string"
            }
          },
          {
            "name": "state",
            "required": true,
            "in": "query",
            "description": "State parameter to validate request origin",
            "schema": {
              "example": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
              "type": "string"
            }
          },
          {
            "name": "error",
            "required": false,
            "in": "query",
            "description": "Error code if authorization was denied",
            "schema": {
              "example": "access_denied",
              "type": "string"
            }
          },
          {
            "name": "error_description",
            "required": false,
            "in": "query",
            "description": "Human-readable error description",
            "schema": {
              "example": "The user denied the request",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OAuth callback processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthCallbackResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid callback parameters or authorization error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Invalid or expired state parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthErrorResponseDto"
                }
              }
            }
          }
        },
        "summary": "Handle OAuth2 callback from provider",
        "tags": [
          "OAuth Authentication"
        ]
      }
    },
    "/": {
      "get": {
        "description": "Get a welcome message from the Tolstoy API",
        "operationId": "AppController_getHello",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Welcome message retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Welcome to Tolstoy - Workflow Automation Platform"
                }
              }
            }
          }
        },
        "summary": "Welcome Message",
        "tags": [
          "App"
        ]
      }
    },
    "/version": {
      "get": {
        "description": "Get version information including build details and commit hash",
        "operationId": "AppController_getVersion",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Version information retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "version": {
                      "type": "string",
                      "example": "1.0.0"
                    },
                    "commit": {
                      "type": "string",
                      "example": "abc123def456"
                    },
                    "buildTime": {
                      "type": "string",
                      "example": "2025-08-09T10:30:00.000Z"
                    },
                    "nodeVersion": {
                      "type": "string",
                      "example": "20.11.0"
                    },
                    "environment": {
                      "type": "string",
                      "example": "production"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Version Information",
        "tags": [
          "App"
        ]
      }
    }
  },
  "info": {
    "title": "Tolstoy API",
    "description": "Interactive API reference for Tolstoy workflow automation platform",
    "version": "1.1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Development"
    },
    {
      "url": "https://tolstoy.getpullse.com",
      "description": "Production"
    },
    {
      "url": "http://localhost:3000",
      "description": "Development"
    }
  ],
  "components": {
    "securitySchemes": {
      "x-org-id": {
        "type": "apiKey",
        "in": "header",
        "name": "x-org-id",
        "description": "Organization ID for multi-tenant access"
      },
      "x-user-id": {
        "type": "apiKey",
        "in": "header",
        "name": "x-user-id",
        "description": "User ID for request context"
      }
    },
    "schemas": {
      "CreateOrganizationDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Organization name",
            "example": "Acme Corp"
          },
          "description": {
            "type": "string",
            "description": "Organization description",
            "example": "Leading technology company"
          },
          "settings": {
            "type": "object",
            "description": "Organization settings",
            "example": {
              "timezone": "UTC",
              "currency": "USD"
            }
          }
        },
        "required": [
          "name"
        ]
      },
      "UpdateOrganizationDto": {
        "type": "object",
        "properties": {}
      },
      "CreateUserDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email address",
            "format": "email",
            "example": "john.doe@example.com"
          },
          "name": {
            "type": "string",
            "description": "User full name",
            "example": "John Doe"
          },
          "role": {
            "type": "string",
            "description": "User role",
            "enum": [
              "admin",
              "member",
              "viewer"
            ],
            "example": "member"
          },
          "profile": {
            "type": "object",
            "description": "User profile information",
            "example": {
              "department": "Engineering",
              "title": "Software Engineer"
            }
          }
        },
        "required": [
          "email",
          "name"
        ]
      },
      "UpdateUserDto": {
        "type": "object",
        "properties": {}
      },
      "CreateToolDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Tool name",
            "example": "Slack Notifier"
          },
          "baseUrl": {
            "type": "string",
            "description": "Base URL for the tool API",
            "example": "https://hooks.slack.com/services",
            "format": "uri"
          },
          "authType": {
            "type": "string",
            "description": "Authentication type (apiKey, oauth2, basic)",
            "example": "apiKey"
          }
        },
        "required": [
          "name",
          "baseUrl",
          "authType"
        ]
      },
      "UpdateToolDto": {
        "type": "object",
        "properties": {}
      },
      "CreateActionDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Human-readable action name",
            "example": "Send Slack Message"
          },
          "key": {
            "type": "string",
            "description": "Unique identifier for the action",
            "example": "slack_send_message"
          },
          "toolId": {
            "type": "string",
            "description": "ID of the associated tool",
            "example": "tool_slack_123"
          },
          "method": {
            "type": "string",
            "description": "HTTP method for the action",
            "enum": [
              "GET",
              "POST",
              "PUT",
              "DELETE",
              "PATCH"
            ],
            "example": "POST"
          },
          "endpoint": {
            "type": "string",
            "description": "API endpoint URL or path",
            "example": "/api/chat.postMessage"
          },
          "headers": {
            "type": "object",
            "description": "HTTP headers required for the action",
            "example": {
              "Content-Type": "application/json",
              "Authorization": "Bearer {token}"
            }
          },
          "inputSchema": {
            "type": "array",
            "description": "Schema defining input parameters for the action",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "channel"
                },
                "type": {
                  "type": "string",
                  "example": "string"
                },
                "required": {
                  "type": "boolean",
                  "example": true
                },
                "description": {
                  "type": "string",
                  "example": "Slack channel ID"
                }
              }
            },
            "example": [
              {
                "name": "channel",
                "type": "string",
                "required": true,
                "description": "Slack channel ID"
              },
              {
                "name": "text",
                "type": "string",
                "required": true,
                "description": "Message content"
              }
            ]
          },
          "executeIf": {
            "type": "object",
            "description": "Conditional execution rules (optional)",
            "example": {
              "user.role": "admin"
            }
          },
          "version": {
            "type": "number",
            "description": "Action version number",
            "example": 1
          }
        },
        "required": [
          "name",
          "key",
          "toolId",
          "method",
          "endpoint",
          "headers",
          "inputSchema"
        ]
      },
      "UpdateActionDto": {
        "type": "object",
        "properties": {}
      },
      "ExecuteActionDto": {
        "type": "object",
        "properties": {
          "inputs": {
            "type": "object",
            "description": "Inputs matching the action's enhanced inputSchema. Supports rich validation including types, formats, enums, visibility conditions, and default values.",
            "example": {
              "title": "My Task Title",
              "priority": 3,
              "urgent": true,
              "status": "in-progress",
              "due_date": "2024-01-15",
              "assignee_email": "user@example.com",
              "escalation_note": "This needs immediate attention"
            },
            "additionalProperties": true,
            "properties": {
              "title": {
                "type": "string",
                "description": "Task title with length validation",
                "minLength": 1,
                "maxLength": 100
              },
              "priority": {
                "type": "number",
                "description": "Priority level from 1-5",
                "minimum": 1,
                "maximum": 5
              },
              "urgent": {
                "type": "boolean",
                "description": "Whether this task is urgent"
              },
              "status": {
                "type": "string",
                "enum": [
                  "todo",
                  "in-progress",
                  "done"
                ],
                "description": "Current status of the task"
              },
              "due_date": {
                "type": "string",
                "format": "date",
                "description": "Due date in YYYY-MM-DD format"
              },
              "assignee_email": {
                "type": "string",
                "format": "email",
                "description": "Email address of the assignee"
              },
              "escalation_note": {
                "type": "string",
                "description": "Note for urgent tasks (visible only when urgent=true)"
              }
            }
          }
        },
        "required": [
          "inputs"
        ]
      },
      "CreateFlowDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Flow name",
            "example": "User Onboarding Flow"
          },
          "description": {
            "type": "string",
            "description": "Flow description",
            "example": "Automated user onboarding process with email and notifications"
          },
          "version": {
            "type": "number",
            "description": "Flow version number",
            "example": 1
          },
          "steps": {
            "type": "array",
            "description": "Workflow steps definition",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "step_1"
                },
                "type": {
                  "type": "string",
                  "example": "action"
                },
                "actionId": {
                  "type": "string",
                  "example": "action_abc123"
                },
                "config": {
                  "type": "object",
                  "example": {
                    "timeout": 30000
                  }
                }
              }
            },
            "example": [
              {
                "id": "step_1",
                "type": "action",
                "actionId": "action_send_email",
                "config": {
                  "to": "{{user.email}}",
                  "template": "welcome"
                }
              }
            ]
          },
          "settings": {
            "type": "object",
            "description": "Flow execution settings",
            "example": {
              "timeout": 300000,
              "retries": 2
            }
          }
        },
        "required": [
          "name",
          "steps"
        ]
      },
      "UpdateFlowDto": {
        "type": "object",
        "properties": {}
      },
      "CreateExecutionLogDto": {
        "type": "object",
        "properties": {
          "flowId": {
            "type": "string",
            "description": "ID of the workflow being executed",
            "example": "flow_abc123"
          },
          "executionId": {
            "type": "string",
            "description": "Unique execution instance ID",
            "example": "exec_xyz789"
          },
          "stepKey": {
            "type": "string",
            "description": "Unique identifier for the step within the workflow",
            "example": "send_notification"
          },
          "inputs": {
            "type": "object",
            "description": "Input data provided to the step",
            "example": {
              "channel": "#general",
              "message": "Workflow started",
              "userId": "user_123"
            }
          },
          "outputs": {
            "type": "object",
            "description": "Output data produced by the step",
            "example": {
              "messageId": "msg_456",
              "timestamp": "2024-01-15T10:30:05Z",
              "success": true
            }
          },
          "error": {
            "type": "object",
            "description": "Error information if step failed",
            "example": {
              "message": "API rate limit exceeded",
              "code": "RATE_LIMIT",
              "retryAfter": 3600
            }
          },
          "status": {
            "type": "string",
            "description": "Execution status",
            "enum": [
              "pending",
              "running",
              "completed",
              "failed"
            ],
            "example": "completed"
          }
        },
        "required": [
          "flowId",
          "executionId",
          "stepKey",
          "inputs",
          "status"
        ]
      },
      "UpdateExecutionLogDto": {
        "type": "object",
        "properties": {}
      },
      "CreateWebhookDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Webhook name",
            "example": "Production Notifications",
            "minLength": 3,
            "maxLength": 100
          },
          "url": {
            "type": "string",
            "description": "Webhook endpoint URL",
            "format": "uri",
            "example": "https://api.example.com/webhook"
          },
          "eventTypes": {
            "description": "Event types to subscribe to",
            "example": [
              "flow.execution.completed",
              "flow.execution.failed"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether the webhook is active",
            "default": true
          },
          "secret": {
            "type": "string",
            "description": "Optional secret for webhook signature verification",
            "example": "webhook_secret_123",
            "minLength": 16,
            "maxLength": 256
          },
          "headers": {
            "type": "object",
            "description": "Additional HTTP headers to include with webhook requests",
            "example": {
              "X-API-Key": "your-api-key",
              "Content-Type": "application/json"
            }
          }
        },
        "required": [
          "name",
          "url",
          "eventTypes"
        ]
      },
      "UpdateWebhookDto": {
        "type": "object",
        "properties": {}
      },
      "CreateAuthConfigDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "apiKey",
              "oauth2"
            ],
            "description": "Type of authentication configuration",
            "example": "apiKey",
            "examples": {
              "apiKey": {
                "summary": "API Key Authentication",
                "value": "apiKey"
              },
              "oauth2": {
                "summary": "OAuth2 Authentication",
                "value": "oauth2"
              }
            }
          },
          "config": {
            "description": "Authentication configuration (structure depends on type)",
            "examples": {
              "apiKey": {
                "summary": "API Key Configuration",
                "description": "Configuration for API key-based authentication",
                "value": {
                  "headerName": "Authorization",
                  "headerValue": "Bearer sk-1234567890abcdef"
                }
              },
              "oauth2": {
                "summary": "OAuth2 Configuration",
                "description": "Configuration for OAuth2-based authentication",
                "value": {
                  "clientId": "your-oauth-client-id",
                  "clientSecret": "your-oauth-client-secret",
                  "accessToken": "oauth2-access-token-here",
                  "refreshToken": "oauth2-refresh-token-here",
                  "scopes": "read write",
                  "expiresAt": "2024-12-31T23:59:59.000Z"
                }
              }
            },
            "oneOf": [
              {
                "type": "object",
                "title": "API Key Configuration",
                "properties": {
                  "headerName": {
                    "type": "string",
                    "example": "Authorization"
                  },
                  "headerValue": {
                    "type": "string",
                    "example": "Bearer sk-1234567890abcdef"
                  }
                },
                "required": [
                  "headerName",
                  "headerValue"
                ]
              },
              {
                "type": "object",
                "title": "OAuth2 Configuration",
                "properties": {
                  "clientId": {
                    "type": "string",
                    "example": "your-oauth-client-id"
                  },
                  "clientSecret": {
                    "type": "string",
                    "example": "your-oauth-client-secret"
                  },
                  "accessToken": {
                    "type": "string",
                    "example": "oauth2-access-token-here"
                  },
                  "refreshToken": {
                    "type": "string",
                    "example": "oauth2-refresh-token-here"
                  },
                  "scopes": {
                    "type": "string",
                    "example": "read write"
                  },
                  "expiresAt": {
                    "type": "string",
                    "example": "2024-12-31T23:59:59.000Z"
                  }
                },
                "required": [
                  "clientId",
                  "clientSecret",
                  "accessToken"
                ]
              }
            ]
          }
        },
        "required": [
          "type",
          "config"
        ]
      },
      "AuthConfigResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the auth config"
          },
          "orgId": {
            "type": "string",
            "description": "Organization ID"
          },
          "toolId": {
            "type": "string",
            "description": "Tool ID"
          },
          "type": {
            "type": "string",
            "enum": [
              "apiKey",
              "oauth2"
            ],
            "description": "Type of authentication configuration"
          },
          "config": {
            "type": "object",
            "description": "Authentication configuration (sensitive values may be masked)"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp"
          }
        },
        "required": [
          "id",
          "orgId",
          "toolId",
          "type",
          "config",
          "createdAt",
          "updatedAt"
        ]
      },
      "DeleteAuthConfigResponseDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Success message",
            "example": "Auth configuration deleted successfully"
          }
        },
        "required": [
          "success",
          "message"
        ]
      },
      "OAuthErrorResponseDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the operation was successful",
            "example": false
          },
          "message": {
            "type": "string",
            "description": "Error message describing what went wrong",
            "example": "Invalid OAuth state parameter"
          },
          "code": {
            "type": "string",
            "description": "Error code for programmatic handling",
            "example": "INVALID_STATE"
          }
        },
        "required": [
          "success",
          "message"
        ]
      },
      "OAuthCallbackResponseDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether OAuth callback was successful",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Success message",
            "example": "OAuth authorization completed successfully"
          },
          "credentialId": {
            "type": "string",
            "description": "User credential ID that was created/updated",
            "example": "cred_123456789"
          }
        },
        "required": [
          "success"
        ]
      }
    }
  }
}
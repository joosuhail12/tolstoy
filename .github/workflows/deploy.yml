name: Tolstoy CI/CD Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allow manual triggering

jobs:
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üîë Setup SSH key
        run: |
          echo "${{ secrets.EC2_KEY }}" | base64 -d > ssh_key.pem
          chmod 600 ssh_key.pem
          
      - name: üîç Debug secrets
        run: |
          echo "Checking secret availability..."
          echo "EC2_USER length: ${#EC2_USER}"
          echo "EC2_HOST length: ${#EC2_HOST}" 
          echo "EC2_PATH length: ${#EC2_PATH}"
          echo "EC2_KEY length: ${#EC2_KEY}"
          if [ -z "$EC2_USER" ] || [ -z "$EC2_HOST" ]; then
            echo "‚ùå Required secrets are missing!"
            echo "Please verify that EC2_USER, EC2_HOST, EC2_KEY, and EC2_PATH are set in GitHub repository secrets"
            exit 1
          fi
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_PATH: ${{ secrets.EC2_PATH }}
          EC2_KEY: ${{ secrets.EC2_KEY }}
          
      - name: ‚úÖ Test SSH connection
        run: |
          ssh -o StrictHostKeyChecking=no -i ssh_key.pem "${EC2_USER}@${EC2_HOST}" "echo 'SSH connection successful'"
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          
      - name: üöÄ Deploy application to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ssh_key.pem "${EC2_USER}@${EC2_HOST}" << 'DEPLOY_SCRIPT'
            set -e
            
            echo "üîÑ Navigating to application directory..."
            cd /home/ubuntu/tolstoy
            
            echo "üì• Pulling latest code from GitHub..."
            git pull origin main
            
            echo "üì¶ Installing dependencies..."
            yarn install --production=false
            
            echo "‚öôÔ∏è Generating Prisma client..."
            yarn db:generate
            
            echo "üî® Building application..."
            yarn build
            
            echo "üîÑ Restarting PM2 application..."
            pm2 restart tolstoy-api || pm2 start ecosystem.config.js
            
            echo "üìä PM2 status..."
            pm2 status
            
            echo "‚úÖ Deployment completed successfully!"
          DEPLOY_SCRIPT
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          
      - name: üóÉÔ∏è Run database migrations (optional)
        run: |
          ssh -o StrictHostKeyChecking=no -i ssh_key.pem "${EC2_USER}@${EC2_HOST}" << 'MIGRATION_SCRIPT'
            set -e
            cd /home/ubuntu/tolstoy
            
            echo "üóÉÔ∏è Running Prisma migrations..."
            yarn db:migrate:deploy || echo "‚ö†Ô∏è No migrations to deploy or migration failed"
            
            echo "‚úÖ Migration step completed!"
          MIGRATION_SCRIPT
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          
      - name: üîç Verify deployment
        run: |
          echo "üîç Verifying application health..."
          
          # Wait a moment for the application to start
          sleep 10
          
          # Test health endpoint
          HEALTH_CHECK=$(curl -s -o /dev/null -w "%{http_code}" http://${EC2_HOST}/health)
          
          if [ "$HEALTH_CHECK" -eq 200 ]; then
            echo "‚úÖ Health check passed (HTTP $HEALTH_CHECK)"
          else
            echo "‚ùå Health check failed (HTTP $HEALTH_CHECK)"
            exit 1
          fi
          
          # Test status endpoint
          STATUS_CHECK=$(curl -s -o /dev/null -w "%{http_code}" http://${EC2_HOST}/status)
          
          if [ "$STATUS_CHECK" -eq 200 ]; then
            echo "‚úÖ Status check passed (HTTP $STATUS_CHECK)"
          else
            echo "‚ùå Status check failed (HTTP $STATUS_CHECK)"
            exit 1
          fi
          
          echo "üéâ Deployment verification successful!"
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          
      - name: üßπ Cleanup SSH key
        if: always()
        run: |
          rm -f ssh_key.pem
          echo "üßπ SSH key cleaned up"
          
      - name: üì¢ Deployment summary
        if: success()
        run: |
          echo "üéâ DEPLOYMENT SUCCESSFUL!"
          echo "üìä Summary:"
          echo "  ‚Ä¢ Repository: ${{ github.repository }}"
          echo "  ‚Ä¢ Branch: ${{ github.ref_name }}"
          echo "  ‚Ä¢ Commit: ${{ github.sha }}"
          echo "  ‚Ä¢ Target: ${EC2_HOST}"
          echo "  ‚Ä¢ Health: http://${EC2_HOST}/health"
          echo "  ‚Ä¢ Status: http://${EC2_HOST}/status"
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
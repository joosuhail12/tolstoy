name: Main CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - 'cli/**'
      - 'sdk/**'
      - 'tolstoy-api-python/**'
      - 'tolstoy-api-typescript/**'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - 'cli/**'
      - 'sdk/**'
      - 'tolstoy-api-python/**'
      - 'tolstoy-api-typescript/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  DATABASE_URL: 'postgresql://test:test@localhost:5432/tolstoy_test'
  REDIS_URL: 'redis://localhost:6379'

jobs:
  # Quality checks that run quickly
  lint-and-type-check:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: 📦 Install dependencies
        run: yarn install --frozen-lockfile

      - name: 🔍 ESLint check
        run: yarn lint

      - name: 🔍 TypeScript type check
        run: npx tsc --noEmit

      - name: 🔍 Prettier check
        run: npx prettier --check "src/**/*.ts" "test/**/*.ts"

  # Security scanning
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: 📦 Install dependencies
        run: yarn install --frozen-lockfile

      - name: 🔒 Run npm audit
        run: yarn audit --audit-level=moderate --groups=dependencies

      - name: 🔒 Check for known vulnerabilities
        run: npx audit-ci --config audit-ci.json
        continue-on-error: true

  # Unit tests with coverage
  unit-tests:
    name: Unit Tests (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      matrix:
        node-version: [18, 20, 21]
      fail-fast: false
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: tolstoy_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'

      - name: 📦 Install dependencies
        run: yarn install --frozen-lockfile

      - name: 🔨 Build application
        run: yarn build

      - name: 🗃️ Setup test database
        run: |
          yarn db:generate
          yarn db:push
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: 🧪 Run unit tests
        run: yarn test --coverage --maxWorkers=2
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          REDIS_URL: ${{ env.REDIS_URL }}
          NODE_ENV: test

      - name: 📊 Upload coverage to Codecov
        if: matrix.node-version == 20
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unit-tests
          name: unit-tests-node-${{ matrix.node-version }}

  # Integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [lint-and-type-check, unit-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: tolstoy_integration
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: 📦 Install dependencies
        run: yarn install --frozen-lockfile

      - name: 🔨 Build application
        run: yarn build

      - name: 🗃️ Setup integration database
        run: |
          yarn db:generate
          yarn db:push
          # Seed test data
          node -e "
            const { PrismaClient } = require('@prisma/client');
            const prisma = new PrismaClient();
            async function seed() {
              await prisma.organization.create({
                data: { name: 'Integration Test Org' }
              });
              console.log('Test data seeded');
            }
            seed().finally(() => prisma.\$disconnect());
          "
        env:
          DATABASE_URL: 'postgresql://test:test@localhost:5432/tolstoy_integration'

      - name: 🚀 Start application
        run: |
          yarn start &
          echo $! > app.pid
          sleep 10
        env:
          DATABASE_URL: 'postgresql://test:test@localhost:5432/tolstoy_integration'
          REDIS_URL: ${{ env.REDIS_URL }}
          NODE_ENV: test
          PORT: 3001

      - name: 🔍 Wait for application to be ready
        run: |
          for i in {1..30}; do
            if curl -f http://localhost:3001/health >/dev/null 2>&1; then
              echo "Application is ready!"
              break
            fi
            echo "Waiting for application... ($i/30)"
            sleep 2
            if [ $i -eq 30 ]; then
              echo "Application failed to start"
              exit 1
            fi
          done

      - name: 🧪 Run integration tests
        run: yarn test:integration || yarn test tests/integration
        env:
          TEST_API_URL: http://localhost:3001
          DATABASE_URL: 'postgresql://test:test@localhost:5432/tolstoy_integration'

      - name: 🛑 Stop application
        if: always()
        run: |
          if [ -f app.pid ]; then
            kill $(cat app.pid) || true
            rm app.pid
          fi

  # Build verification
  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: 📦 Install dependencies
        run: yarn install --frozen-lockfile

      - name: 🔨 Build for production
        run: yarn build

      - name: 📦 Test package installation
        run: |
          npm pack
          cd /tmp
          npm install $GITHUB_WORKSPACE/tolstoy-*.tgz
          echo "Package installation successful"

      - name: 🔍 Validate build output
        run: |
          # Check that main entry points exist
          test -f dist/main.js
          test -f dist/app.module.js
          
          # Check that TypeScript compiled successfully
          if grep -r "export.*from.*\.ts" dist/; then
            echo "❌ Found .ts imports in compiled JS"
            exit 1
          fi
          
          echo "✅ Build verification passed"

  # Database migration testing
  migration-tests:
    name: Database Migration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: tolstoy_migration_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: 📦 Install dependencies
        run: yarn install --frozen-lockfile

      - name: 🗃️ Test fresh migration
        run: |
          yarn db:generate
          yarn db:migrate:deploy
        env:
          DATABASE_URL: 'postgresql://test:test@localhost:5432/tolstoy_migration_test'

      - name: 🔍 Validate database schema
        run: |
          yarn db:generate
          # Check that schema is in sync
          npx prisma db pull --schema=prisma/schema.prisma
          if git diff --exit-code prisma/schema.prisma; then
            echo "✅ Database schema is in sync"
          else
            echo "❌ Database schema is out of sync"
            git diff prisma/schema.prisma
            exit 1
          fi
        env:
          DATABASE_URL: 'postgresql://test:test@localhost:5432/tolstoy_migration_test'

      - name: 🧪 Test migration rollback (if applicable)
        run: |
          echo "Migration rollback testing would go here"
          # Future: Add migration rollback tests
        env:
          DATABASE_URL: 'postgresql://test:test@localhost:5432/tolstoy_migration_test'

  # Final success job
  ci-success:
    name: ✅ CI Success
    runs-on: ubuntu-latest
    needs: 
      - lint-and-type-check
      - security-audit
      - unit-tests
      - integration-tests
      - build-verification
      - migration-tests
    if: always()
    
    steps:
      - name: ✅ All checks passed
        if: |
          needs.lint-and-type-check.result == 'success' &&
          needs.security-audit.result == 'success' &&
          needs.unit-tests.result == 'success' &&
          needs.integration-tests.result == 'success' &&
          needs.build-verification.result == 'success' &&
          needs.migration-tests.result == 'success'
        run: |
          echo "🎉 All CI checks passed successfully!"
          echo "✅ Code quality: PASSED"
          echo "✅ Security: PASSED"  
          echo "✅ Unit tests: PASSED"
          echo "✅ Integration tests: PASSED"
          echo "✅ Build verification: PASSED"
          echo "✅ Database migrations: PASSED"

      - name: ❌ Some checks failed
        if: |
          needs.lint-and-type-check.result != 'success' ||
          needs.security-audit.result != 'success' ||
          needs.unit-tests.result != 'success' ||
          needs.integration-tests.result != 'success' ||
          needs.build-verification.result != 'success' ||
          needs.migration-tests.result != 'success'
        run: |
          echo "❌ Some CI checks failed:"
          echo "Code quality: ${{ needs.lint-and-type-check.result }}"
          echo "Security: ${{ needs.security-audit.result }}"
          echo "Unit tests: ${{ needs.unit-tests.result }}"
          echo "Integration tests: ${{ needs.integration-tests.result }}"
          echo "Build verification: ${{ needs.build-verification.result }}"
          echo "Database migrations: ${{ needs.migration-tests.result }}"
          exit 1
name: Clean Production Deployment

on:
  workflow_dispatch: # Manual trigger only for clean deployment

jobs:
  clean-deploy:
    name: Clean Deploy to EC2
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üîë Setup SSH key
        run: |
          echo "${{ secrets.EC2_KEY }}" | base64 -d > ssh_key.pem
          chmod 600 ssh_key.pem
          
      - name: üîç Debug secrets
        run: |
          echo "Checking secret availability..."
          echo "EC2_USER length: ${#EC2_USER}"
          echo "EC2_HOST length: ${#EC2_HOST}" 
          if [ -z "$EC2_USER" ] || [ -z "$EC2_HOST" ]; then
            echo "‚ùå Required secrets are missing!"
            exit 1
          fi
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          
      - name: ‚úÖ Test SSH connection
        run: |
          ssh -o StrictHostKeyChecking=no -i ssh_key.pem "${EC2_USER}@${EC2_HOST}" "echo 'SSH connection successful'"
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          
      - name: üßπ Complete Server Cleanup
        run: |
          ssh -o StrictHostKeyChecking=no -i ssh_key.pem "${EC2_USER}@${EC2_HOST}" << 'CLEANUP_SCRIPT'
            set -e
            
            echo "üõë Stopping all Node.js processes..."
            # Kill PM2 and all Node processes aggressively
            pm2 kill 2>/dev/null || true
            pkill -9 -f "node" 2>/dev/null || true
            pkill -9 -f "tolstoy" 2>/dev/null || true
            pkill -9 -f "dist/main.js" 2>/dev/null || true
            pkill -9 -f "pm2" 2>/dev/null || true
            
            echo "üóëÔ∏è Removing all application files..."
            # Remove entire application directory
            rm -rf /home/ubuntu/tolstoy
            
            echo "üóëÔ∏è Cleaning up logs..."
            # Remove all PM2 and application logs
            rm -rf /home/ubuntu/.pm2
            rm -rf /home/ubuntu/logs
            mkdir -p /home/ubuntu/logs
            
            echo "üóëÔ∏è Cleaning up Node modules cache..."
            # Clear npm and yarn caches
            npm cache clean --force 2>/dev/null || true
            yarn cache clean 2>/dev/null || true
            
            echo "üîÑ Resetting PM2..."
            # Completely reset PM2
            pm2 unstartup 2>/dev/null || true
            pm2 startup ubuntu -u ubuntu --hp /home/ubuntu 2>/dev/null || true
            
            echo "‚úÖ Server cleanup completed!"
          CLEANUP_SCRIPT
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          
      - name: üöÄ Fresh Application Deployment
        run: |
          ssh -o StrictHostKeyChecking=no -i ssh_key.pem "${EC2_USER}@${EC2_HOST}" << 'DEPLOY_SCRIPT'
            set -e
            
            echo "üìÅ Creating fresh application directory..."
            mkdir -p /home/ubuntu/tolstoy
            cd /home/ubuntu/tolstoy
            
            echo "üì• Cloning latest code from GitHub..."
            git clone https://github.com/joosuhail12/tolstoy.git .
            
            echo "üîç Checking Node.js version..."
            node --version
            npm --version
            
            echo "üì¶ Installing dependencies..."
            npm ci --production=false
            
            echo "‚öôÔ∏è Generating Prisma client..."
            npx prisma generate
            
            echo "üî® Building application..."
            npm run build
            
            echo "üóÉÔ∏è Configuring environment for database migrations..."
            # Install jq for JSON parsing
            sudo apt-get update && sudo apt-get install -y jq
            
            # Get database URLs from AWS Secrets Manager for Prisma CLI
            SECRET_JSON=$(aws secretsmanager get-secret-value --secret-id tolstoy/env --region us-east-1 --query 'SecretString' --output text)
            export DATABASE_URL=$(echo $SECRET_JSON | jq -r '.DATABASE_URL')
            export DIRECT_URL=$(echo $SECRET_JSON | jq -r '.DIRECT_URL')
            
            echo "üóÉÔ∏è Running database migrations..."
            npx prisma migrate deploy
            
            echo "‚úÖ Application built successfully!"
          DEPLOY_SCRIPT
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          
      - name: üéØ Start Application with PM2
        run: |
          ssh -o StrictHostKeyChecking=no -i ssh_key.pem "${EC2_USER}@${EC2_HOST}" << 'PM2_SCRIPT'
            set -e
            cd /home/ubuntu/tolstoy
            
            echo "üîÑ Starting application with PM2..."
            # Use the ecosystem.config.js from the repository
            pm2 start ecosystem.config.js --env production
            
            echo "üíæ Saving PM2 configuration..."
            pm2 save
            
            echo "üìä PM2 Status:"
            pm2 status
            
            echo "‚è≥ Waiting for application startup..."
            sleep 10
            
            echo "üè• Initial health check..."
            for i in {1..6}; do
              if curl -s -f http://localhost:3000/health > /dev/null 2>&1; then
                echo "‚úÖ Application is responding on port 3000!"
                break
              fi
              echo "‚è≥ Waiting for app to start... ($i/6)"
              sleep 5
              if [ $i -eq 6 ]; then
                echo "‚ùå Application not responding after 30 seconds"
                echo "üìã Recent logs:"
                pm2 logs tolstoy-api --lines 20 --raw || true
                exit 1
              fi
            done
            
            echo "‚úÖ Application started successfully!"
          PM2_SCRIPT
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          
      - name: üîç Comprehensive Health Verification
        run: |
          echo "üè• Running comprehensive health checks..."
          
          # Test health endpoint
          echo "Testing /health endpoint..."
          ssh -o StrictHostKeyChecking=no -i ssh_key.pem ${EC2_USER}@${EC2_HOST} "
            HEALTH_CHECK=\$(curl -s -o /dev/null -w '%{http_code}' http://localhost:3000/health)
            if [ \"\$HEALTH_CHECK\" -eq 200 ]; then
              echo \"‚úÖ Health endpoint: HTTP \$HEALTH_CHECK\"
            else
              echo \"‚ùå Health endpoint failed: HTTP \$HEALTH_CHECK\"
              exit 1
            fi
          "
          
          # Test status endpoint  
          echo "Testing /status endpoint..."
          ssh -o StrictHostKeyChecking=no -i ssh_key.pem ${EC2_USER}@${EC2_HOST} "
            STATUS_CHECK=\$(curl -s -o /dev/null -w '%{http_code}' http://localhost:3000/status)
            if [ \"\$STATUS_CHECK\" -eq 200 ]; then
              echo \"‚úÖ Status endpoint: HTTP \$STATUS_CHECK\"
            else
              echo \"‚ö†Ô∏è Status endpoint: HTTP \$STATUS_CHECK (may be expected)\"
            fi
          "
          
          # Test API endpoint (should return 401/400 for auth)
          echo "Testing API endpoints..."
          ssh -o StrictHostKeyChecking=no -i ssh_key.pem ${EC2_USER}@${EC2_HOST} "
            API_CHECK=\$(curl -s -o /dev/null -w '%{http_code}' http://localhost:3000/organizations)
            if [ \"\$API_CHECK\" -eq 401 ] || [ \"\$API_CHECK\" -eq 400 ]; then
              echo \"‚úÖ API endpoint: HTTP \$API_CHECK (auth required - correct)\"
            else
              echo \"‚ö†Ô∏è API endpoint: HTTP \$API_CHECK\"
            fi
          "
          
          echo "‚úÖ All health checks completed!"
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          
      - name: üåê External Domain Test
        run: |
          echo "üåê Testing external domain access..."
          
          # Wait a bit for any DNS/proxy propagation
          sleep 10
          
          # Test the external domain
          EXTERNAL_CHECK=$(curl -s -o /dev/null -w "%{http_code}" --connect-timeout 15 --max-time 30 https://tolstoy.getpullse.com/health || echo "000")
          
          if [ "$EXTERNAL_CHECK" -eq 200 ]; then
            echo "üéâ External domain test: SUCCESS (HTTP $EXTERNAL_CHECK)"
            echo "‚úÖ https://tolstoy.getpullse.com is responding correctly!"
          else
            echo "‚ö†Ô∏è External domain test: HTTP $EXTERNAL_CHECK"
            echo "Note: This may take a few minutes for Cloudflare to route properly"
            echo "Server is running correctly on localhost:3000"
          fi
          
      - name: üßπ Cleanup SSH key
        if: always()
        run: |
          rm -f ssh_key.pem
          echo "üßπ SSH key cleaned up"
          
      - name: üéâ Deployment Complete
        run: |
          echo "üéâ CLEAN DEPLOYMENT SUCCESSFUL!"
          echo "üìä Summary:"
          echo "  ‚Ä¢ Server: Completely cleaned and rebuilt"
          echo "  ‚Ä¢ Repository: Fresh clone from main branch"
          echo "  ‚Ä¢ Dependencies: Freshly installed"
          echo "  ‚Ä¢ Database: Migrations applied"
          echo "  ‚Ä¢ Application: Running on port 3000"
          echo "  ‚Ä¢ PM2: Process manager configured and saved"
          echo "  ‚Ä¢ Health: All endpoints responding"
          echo ""
          echo "üåê Your application should be available at:"
          echo "  ‚Ä¢ Direct: http://3.81.233.52:3000/health"
          echo "  ‚Ä¢ Domain: https://tolstoy.getpullse.com/health"
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
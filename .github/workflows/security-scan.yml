name: Security Scanning

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'package*.json'
      - 'yarn.lock'
      - '.github/workflows/security-scan.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'package*.json'
      - 'yarn.lock'
      - '.github/workflows/security-scan.yml'
  schedule:
    # Run security scans daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch: # Allow manual triggering

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # CodeQL Analysis for code vulnerabilities
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          config-file: ./.github/codeql/codeql-config.yml

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: 📦 Install dependencies
        run: yarn install --frozen-lockfile

      - name: 🔨 Build application
        run: yarn build

      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  # Dependency vulnerability scanning
  dependency-security:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: 📦 Install dependencies
        run: yarn install --frozen-lockfile

      - name: 🔒 Run npm audit
        run: |
          echo "Running npm audit for high and critical vulnerabilities..."
          yarn audit --audit-level=high --groups=dependencies || {
            echo "High/critical vulnerabilities found, but continuing scan..."
            exit_code=$?
            echo "audit_exit_code=$exit_code" >> $GITHUB_OUTPUT
          }

      - name: 🔍 Advanced dependency scanning with audit-ci
        run: |
          npx audit-ci --config audit-ci.json --report-type summary
        continue-on-error: true

      - name: 📊 Generate dependency report
        run: |
          echo "# Dependency Security Report" > security-report.md
          echo "**Date:** $(date -u)" >> security-report.md
          echo "**Repository:** ${{ github.repository }}" >> security-report.md
          echo "**Commit:** ${{ github.sha }}" >> security-report.md
          echo "" >> security-report.md
          
          # Count dependencies
          DEPS_COUNT=$(cat package.json | jq '.dependencies | length')
          DEV_DEPS_COUNT=$(cat package.json | jq '.devDependencies | length')
          
          echo "**Dependencies:** $DEPS_COUNT production, $DEV_DEPS_COUNT development" >> security-report.md
          echo "" >> security-report.md
          
          # Check for outdated packages
          echo "## Outdated Packages" >> security-report.md
          yarn outdated --json 2>/dev/null | jq -r '.data.body[] | "- " + .[0] + " (current: " + .[1] + ", latest: " + .[3] + ")"' >> security-report.md || echo "No outdated packages detected" >> security-report.md

      - name: 📤 Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-security-report
          path: security-report.md
          retention-days: 30

  # License compliance checking
  license-scan:
    name: License Compliance Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: 📦 Install dependencies
        run: yarn install --frozen-lockfile

      - name: 🔍 Check license compliance
        run: |
          echo "Checking license compliance..."
          npx license-checker --summary --excludePrivatePackages
          
          # Generate detailed license report
          npx license-checker --json --out license-report.json
          
          # Check for problematic licenses (GPL, AGPL, etc.)
          PROBLEMATIC_LICENSES=$(npx license-checker --json | jq -r 'to_entries[] | select(.value.licenses | test("GPL|AGPL|LGPL"; "i")) | .key + " - " + .value.licenses' || echo "")
          
          if [ -n "$PROBLEMATIC_LICENSES" ]; then
            echo "⚠️ Warning: Found potentially problematic licenses:"
            echo "$PROBLEMATIC_LICENSES"
            # Don't fail build for license issues in development, just warn
          else
            echo "✅ No problematic licenses detected"
          fi

      - name: 📤 Upload license report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: license-compliance-report
          path: license-report.json
          retention-days: 30

  # Secret scanning (basic implementation)
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better secret detection

      - name: 🔍 Install and run TruffleHog
        run: |
          # Install TruffleHog
          curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin
          
          # Run TruffleHog scan
          trufflehog filesystem . \
            --exclude-paths=.github/workflows/security-scan.yml \
            --exclude-paths=node_modules \
            --exclude-paths=.git \
            --exclude-paths=dist \
            --json > trufflehog-results.json || true
          
          # Check if any secrets were found
          if [ -s trufflehog-results.json ]; then
            echo "⚠️ Potential secrets detected!"
            cat trufflehog-results.json
            echo "Please review the above results and remove any actual secrets."
            # Don't fail the build for potential false positives
          else
            echo "✅ No secrets detected"
          fi

      - name: 📤 Upload secret scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: secret-scan-results
          path: trufflehog-results.json
          retention-days: 30

  # Docker security scanning (if using Docker)
  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: contains(github.event.head_commit.message, '[docker]') || github.event_name == 'schedule'

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔨 Build Docker image
        run: |
          if [ -f "Dockerfile" ]; then
            docker build -t tolstoy:security-test .
          else
            echo "No Dockerfile found, skipping Docker security scan"
            exit 0
          fi

      - name: 🔍 Run Trivy vulnerability scanner
        if: hashFiles('Dockerfile') != ''
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'tolstoy:security-test'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Trivy scan results to GitHub Security tab
        if: hashFiles('trivy-results.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Summary job
  security-summary:
    name: 🔒 Security Summary
    runs-on: ubuntu-latest
    needs: [codeql-analysis, dependency-security, license-scan, secret-scan]
    if: always()

    steps:
      - name: 📊 Security scan summary
        run: |
          echo "# 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Scan Type | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| CodeQL Analysis | ${{ needs.codeql-analysis.result }} | Static code analysis |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Security | ${{ needs.dependency-security.result }} | npm audit + audit-ci |" >> $GITHUB_STEP_SUMMARY
          echo "| License Compliance | ${{ needs.license-scan.result }} | License compatibility check |" >> $GITHUB_STEP_SUMMARY
          echo "| Secret Scanning | ${{ needs.secret-scan.result }} | TruffleHog scan |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall security status
          if [[ "${{ needs.codeql-analysis.result }}" == "success" && 
                "${{ needs.dependency-security.result }}" == "success" && 
                "${{ needs.license-scan.result }}" == "success" && 
                "${{ needs.secret-scan.result }}" == "success" ]]; then
            echo "## ✅ Overall Status: PASS" >> $GITHUB_STEP_SUMMARY
            echo "All security scans completed successfully." >> $GITHUB_STEP_SUMMARY
          else
            echo "## ⚠️ Overall Status: REVIEW REQUIRED" >> $GITHUB_STEP_SUMMARY
            echo "One or more security scans require attention. Please review the results." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
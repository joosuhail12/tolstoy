// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Prisma Schema Models

model Organization {
  id                  String                @id @default(cuid())
  name                String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  users               User[]
  tools               Tool[]
  actions             Action[]
  flows               Flow[]
  webhooks            Webhook[]
  executionLogs       ExecutionLog[]
  actionExecutionLogs ActionExecutionLog[]
  webhookDispatchLogs WebhookDispatchLog[]
  toolAuthConfigs     ToolAuthConfig[]
  userCredentials     UserCredential[]

  @@index([createdAt])
}

model User {
  id            String      @id @default(cuid())
  orgId         String
  email         String      @unique
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  organization  Organization @relation(fields: [orgId], references: [id])
  executionLogs ExecutionLog[]
  actionExecutionLogs ActionExecutionLog[]
  userCredentials UserCredential[]
}

model Tool {
  id            String       @id @default(cuid())
  orgId         String
  name          String
  baseUrl       String
  authType      String
  secretName    String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  organization    Organization     @relation(fields: [orgId], references: [id])
  actions         Action[]
  toolAuthConfigs ToolAuthConfig[]
  userCredentials UserCredential[]

  @@index([orgId])
  @@index([createdAt])
}

model Action {
  id             String   @id @default(cuid())
  name           String
  key            String
  orgId          String
  toolId         String
  method         String
  endpoint       String
  headers        Json
  inputSchema    Json // ActionInputParam[] - Enhanced input schema with rich UI/validation metadata
  executeIf      Json?
  version        Int      @default(1)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  tool           Tool     @relation(fields: [toolId], references: [id])
  organization   Organization @relation(fields: [orgId], references: [id])
  executionLogs  ActionExecutionLog[]

  @@unique([orgId, key])
  @@index([toolId])
}

model Flow {
  id            String   @id @default(cuid())
  orgId         String
  version       Int      @default(1)
  steps         Json
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  organization  Organization @relation(fields: [orgId], references: [id])
  executionLogs ExecutionLog[]
}

model ExecutionLog {
  id          String   @id @default(cuid())
  orgId       String
  userId      String
  flowId      String
  executionId String
  stepKey     String
  status      String   // 'started','completed','skipped','failed'
  inputs      Json
  outputs     Json?
  error       Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  organization Organization @relation(fields: [orgId], references: [id])
  user         User         @relation(fields: [userId], references: [id])
  flow         Flow         @relation(fields: [flowId], references: [id])

  @@index([orgId, flowId, executionId])
  @@index([executionId, stepKey])
}

model ActionExecutionLog {
  id          String   @id @default(cuid())
  orgId       String
  userId      String?  // Optional since actions can be executed without user context
  actionId    String?  // Optional during initial creation, will be set once action is found
  actionKey   String
  executionId String   @unique
  status      String   // 'pending','running','completed','failed','cancelled'
  inputs      Json
  outputs     Json?
  error       Json?
  duration    Int?     // Duration in milliseconds
  retryCount  Int      @default(0)
  parentId    String?  // For tracking retries - points to original execution
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  organization Organization @relation(fields: [orgId], references: [id])
  user         User?        @relation(fields: [userId], references: [id])
  action       Action?      @relation(fields: [actionId], references: [id])

  @@index([orgId, actionKey])
  @@index([executionId])
  @@index([orgId, status])
  @@index([createdAt])
}

model Webhook {
  id          String   @id @default(cuid())
  orgId       String
  name        String
  url         String
  eventTypes  String[]
  enabled     Boolean  @default(true)
  secret      String?
  headers     Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  organization Organization @relation(fields: [orgId], references: [id])
  dispatchLogs WebhookDispatchLog[]

  @@index([orgId])
  @@index([enabled])
}

model WebhookDispatchLog {
  id          String   @id @default(cuid())
  webhookId   String
  orgId       String
  eventType   String
  url         String
  status      String   // 'success' | 'failure'
  statusCode  Int?     // HTTP status code
  duration    Float    // duration in milliseconds
  error       Json?    // error details if failed
  deliveryId  String   // unique delivery identifier
  createdAt   DateTime @default(now())

  webhook      Webhook      @relation(fields: [webhookId], references: [id])
  organization Organization @relation(fields: [orgId], references: [id])

  @@index([orgId, createdAt])
  @@index([webhookId, createdAt])
  @@index([eventType, createdAt])
}

model ToolAuthConfig {
  id        String   @id @default(cuid())
  orgId     String
  toolId    String
  name      String   @default("default") // Named configuration (e.g., "production", "staging", "development")
  type      String   // "apiKey" | "oauth2"
  config    Json
  isDefault Boolean  @default(false) // Marks the default configuration for the tool
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tool         Tool         @relation(fields: [toolId], references: [id])
  organization Organization @relation(fields: [orgId], references: [id])

  @@unique([orgId, toolId, name]) // Allow multiple named configs per tool
  @@index([orgId])
  @@index([orgId, toolId]) // Performance index for finding all configs for a tool
}

model UserCredential {
  id           String   @id @default(cuid())
  orgId        String
  userId       String
  toolId       String
  accessToken  String
  refreshToken String
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  tool         Tool         @relation(fields: [toolId], references: [id])
  organization Organization @relation(fields: [orgId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  @@unique([orgId, userId, toolId])
  @@index([orgId, userId])
}

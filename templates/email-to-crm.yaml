---
name: Email to CRM Sync
description: Parse incoming emails and create contacts in CRM system
version: 1
category: CRM Integration
author: Tolstoy Team
tags: [email, crm, contact, sync, automation]
inputs:
  - name: crm_system
    type: string
    required: true
    description: CRM system (salesforce, hubspot, pipedrive)
  - name: lead_source
    type: string
    default: "Email Inquiry"
    description: Source to tag new contacts with
---
trigger:
  type: webhook
  source: email
  event: email.received

steps:
  - key: parse_email
    action: email.parse
    inputs:
      raw_email: "{{trigger.payload.raw}}"
      extract_fields: [sender, subject, body, attachments]

  - key: extract_contact_info
    action: nlp.extract_entities
    inputs:
      text: "{{parse_email.outputs.body}}"
      entities: [person, organization, email, phone]

  - key: determine_contact_type
    action: conditional
    inputs:
      conditions:
        - if:
            field: "{{parse_email.outputs.subject}}"
            operator: "contains"
            value: "demo"
          then: "demo_request"
        - if:
            field: "{{parse_email.outputs.subject}}"
            operator: "contains"
            value: "support"
          then: "support_ticket"
        - if:
            field: "{{parse_email.outputs.body}}"
            operator: "contains"
            value: "pricing"
          then: "sales_inquiry"
      default: "general_inquiry"

  - key: format_crm_contact
    action: transform
    inputs:
      template:
        firstName: "{{extract_contact_info.outputs.person[0].firstName}}"
        lastName: "{{extract_contact_info.outputs.person[0].lastName}}"
        email: "{{parse_email.outputs.sender}}"
        company: "{{extract_contact_info.outputs.organization[0].name}}"
        phone: "{{extract_contact_info.outputs.phone[0]}}"
        leadSource: "{{inputs.lead_source}}"
        contactType: "{{determine_contact_type.outputs}}"
        originalSubject: "{{parse_email.outputs.subject}}"
        initialMessage: "{{parse_email.outputs.body}}"
        createdDate: "{{trigger.timestamp}}"

  - key: create_crm_contact
    action: "crm.{{inputs.crm_system}}.create_contact"
    inputs:
      contact_data: "{{format_crm_contact.outputs}}"
      duplicate_check: "email"
      update_if_exists: true

  - key: create_follow_up_task
    action: "crm.{{inputs.crm_system}}.create_task"
    inputs:
      title: "Follow up on {{determine_contact_type.outputs}}"
      description: "Contact received via email: {{parse_email.outputs.subject}}"
      contact_id: "{{create_crm_contact.outputs.id}}"
      due_date: "{{date.add(trigger.timestamp, '2 days')}}"
      priority: "high"
    condition:
      field: "{{determine_contact_type.outputs}}"
      operator: "in"
      value: ["demo_request", "sales_inquiry"]

  - key: send_confirmation_email
    action: email.send
    inputs:
      to: "{{parse_email.outputs.sender}}"
      subject: "Re: {{parse_email.outputs.subject}}"
      template: "contact_confirmation"
      data:
        firstName: "{{extract_contact_info.outputs.person[0].firstName}}"
        contactType: "{{determine_contact_type.outputs}}"
        ticketId: "{{create_crm_contact.outputs.id}}"
server {
    listen 80;
    server_name _;

    # Enable CORS for OpenAPI spec
    add_header 'Access-Control-Allow-Origin' '*' always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
    add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,x-org-id,x-user-id' always;
    add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;

    # Serve OpenAPI spec directly
    location /openapi.json {
        alias /var/www/html/openapi.json;
        add_header Content-Type application/json;
    }
    
    # Health check for OpenAPI server
    location /health {
        return 200 '{"status":"ok","service":"openapi","timestamp":"$time_iso8601"}';
        add_header Content-Type application/json;
    }

    # Proxy to main Tolstoy API
    location / {
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }
}